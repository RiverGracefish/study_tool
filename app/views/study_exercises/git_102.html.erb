<h1>Git 102</h1>

<h2><b> Even More Git and Github.com </b></h2>

<h3>Practice Project</h3>
<p><%= link_to  'https://github.com/davincicoders/git_fork_practice', 'https://github.com/davincicoders/git_fork_practice'%></p>

<h3>Forking a project</h3>
<p>Fork is a Github thing, not a Git command</p>
<p>Clicking <button>fork</button> creates a copy of an existing repo for your Github account</p>
<p>This provides you the ability to push/pull to your own copy of the repo, even though you may not have write access to the original repo</p>

<h3>How our Repos are setup</h3>
<pre>
   Original Repo                 Your Public Repo
   ___________________          _____________________
  | davincicoders/    |  Fork  | your-user-name/     |
  | git_fork_practice |------->| git_fork_practice   |
  | (on Github)       |        | (on Github)         |
  |___________________|        |_____________________|
                                          |
                                __________|__________
                               | git_fork_practice   |
                               | Local Repo          |
                               |_____________________|
</pre>
<output> (on Github) is Remote Repo; Local Repo is Local Repo</output>
<p>Other Forks of the Repo</p>
<pre>DebFrey/git_fork_practice (on Github)</pre>
<pre>jwilliams722/git_fork_practice (on Github)</pre>
<pre>jasonnoble/git_fork_practice (on Github)</pre>

<h3>Let's pull our fork of the repo local</h3>
<p>If you want a copy of a remote repository available locally, that operation is called clone</p>
<p>Visit your fork in a browser, make sure SSH is selected, click the clipboard icon.</p>

<h3>Clone Repo</h3>
<output> >>cd ~/workspace/davinci_coders_t2_2014</output>
<output> >>git clone git@github.com:jasonnoble/git_fork_practice.git</output>
<output> >>cd git_fork_practice</output>
<output> >>git remote -v</output>

<h3>Add Upstream</h3>
<output> >>git remote add upstream git@github.comidavincicoders/git_fork_practice_git</output>
<output> >>git remote -v</output>
<output> >>git remote add remote_name git_repo_url</output>

<h3>Add Tracker Story</h3>
<h4>Create a Pivotal Tracker Story</h4>
<p>Description: Add your name to the toolbelt-class-t2-2014.txt file in the repository</p>

<h3>Git branches</h3>
<h4>Git branches allow you localize changes</h4>
<pre>
                  master
  O--O--O--O--O--O--O
   \             topic_branch
    \--O--O--O--O--O
</pre>
<h4>I'm currently on master, how do I create a branch?</h4>
<pre>
  You are here                      master
       0-------------------------------
</pre>
<output><b> >>git checkout -b XXXX_YYYY_ZZZZ</b></output>
<output> --XXXX = Pivotal Story ID</output>
<output> --YYYY = Short description</output>
<output> --ZZZZ = Branch it's based off of</output>
<output> >>git checkout -b 53680073_add_my_name_master</output>
<output> >>git branch     #==>(shows all branches, *=current branch)</output>
<h4>Now we're on the 53680073_add_my_name_master branch</h4>
<pre>
                                     master
       O-------------------------------
        \You are here               53680073_add_my_name_master
         \0------------------------------------
</pre>
<h4>We haven't committed anything, but if we do, the commit will end up on the new branch</h4>

<h3>What's next?</h3>
<h4>Modify a file</h4>
<p> >>mine .</p>
<p> open (Cmnd-Shift-N) toolbelt-class-t2-2014.txt</p>
<p> Add your name to the list on line two</p>
<p> Save the file</p>
<p> Commit your change</p>
<output>At this point, I'm going to assume you know what you need to do to commit changesin Git. If not refer to your notes in Evernote or the Git 101 presentation.</output>
<p> Push your change</p>
<output> >>git push -u origin 53680073_add_my_name_master</output>

<h3>Git branches</h3>
<h4>Our new commit is on the 53689973_add_my_name_master branch</h4>
<pre>
                                     master
       O-------------------------------
        \You are here               53680073_add_my_name_master
         \------0------------------------------
</pre>

<h3>Pulling in upstream changes</h3>
<h4> >>git fetch upstream</h4>
<p>Checks for updates without actually pulling any changes into your branch "has anything been updated since my last pull or fetch?"</p>
<p>Read through the output, if the branch we're based off of (master) didn't have any updates, we're done.</p>

<h3>Fetch finds changes on master</h3>
<h4>Someone pushed changes to the master branch</h4>
<pre>
                                     master
       O-----O-------------------------
        \You are here               53680073_add_my_name_master
         \------0------------------------------
</pre>

<h3>Rebase off upstream/master</h3>
<pre>
                                     master
       O-----O-------------------------
              \
         You are here               53680073_add_my_name_master
          ------0------------------------------
</pre>

<h3>Handling conflict</h3>
<h5>Johnny adds his name as line two</h5>
<h5>Julie adds his name as line two</h5>
<h4>Johnny commits his change and pushes it to the upstream master branch, Julie commits, fetches upstream and attempts to rebase upstream/ master</h4>
<h4>What happens? Merge Conflict!!!!!!</h4>

<h3>Fixing Merge Conflicts</h3>
<h4><b> >>git mergetool</b></h4>
<h4>Each arrow represents a place where two people changed the same line of code</h4>
<p>Or at least Git thinks you did</p>
<h4>You can use the arrow keys to move through the conflicts (Down arrow = Next conflict, Up arrow = Previous Conflict)</h4>
<h4>As each conflict is highlighted, you can use the arrows (Left arrow choose left, Right arrow choose right) or select an action from the action menu</h4>
<h4>In this case, we want both changes, so we select the conflict, then select "Choose Both (left first)" from the Action drop down</h4>
<h4>Hit Cmnd-S to save the file, then hit Cmnd-Q to quit open diff</h4>
<h4> >>git rebase --continue</h4>

<h3>On to our next change!</h3>

<h3>Classwork</h3>
<h4>Pair with someone</h4>
<h4>Add their repo as a remote</h4>
<h4>Try to pull their changes</h4>
<h4>Get a merge conflict</h4>
<h4>Fix it</h4>
